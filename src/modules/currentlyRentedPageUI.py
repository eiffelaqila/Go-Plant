
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import mysql.connector as sql
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import *
from PIL import Image, ImageTk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("../../img")
ASSETS_PATH2 = OUTPUT_PATH.parent.parent / Path("./img")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def relative_to_image(path: str) -> Path:
    return ASSETS_PATH2 / Path(path)


class currentlyRentedPageUI():
    def __init__(self, root, curUser, db, frame):
        from modules.homePageUI import homePage
        self.root = root
        self.curUser = curUser
        self.db = db
        self.curIdx = 0

        mycon = sql.connect(host=self.db.host, port=self.db.port, user=self.db.username, password=self.db.password, database='goplant')
        cur = mycon.cursor()
        command = "SELECT id_pelanggan, nama_tanaman, img_path, tanggal_akhir FROM OrderList ol LEFT OUTER JOIN Tanaman t on ol.id_tanaman = t.id_tanaman WHERE id_pelanggan = " + str(curUser.id_pelanggan) + " AND tanggal_akhir > CURDATE() AND status = 1"
        cur.execute(command)
        datas = cur.fetchall()

        frame.destroy()

        canvas = Canvas(
            root,
            bg = "#FFFFFF",
            height = 720,
            width = 1280,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        
        canvas.place(x = 0, y = 0)
        
        self.displayListTanaman(canvas, datas, 0)
        canvas.create_rectangle(
            0.0,
            110.0,
            1280.0,
            731.0,
            fill="#DCE1DD",
            outline="")

        canvas.create_text(
            175.0,
            181.0,
            anchor="nw",
            text="Currently Rented",
            fill="#000000",
            font=("Inter", 32 * -1)
        )
        global userInfo_image_1
        global cart_image_2
        global search_image_3
        global curRented_image_4
        global transHist_image_5
        userInfo_image_1 = PhotoImage(
            file=relative_to_assets("btnUserInfo.png"))
        btnUserInfo = Button(
            image=userInfo_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )
        btnUserInfo.place(
            x=1027.0,
            y=31.0,
            width=186.0,
            height=55.0
        )

        cart_image_2 = PhotoImage(
            file=relative_to_assets("btnCart.png"))
        btnCart = Button(
            image=cart_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        btnCart.place(
            x=830.0,
            y=31.0,
            width=186.0,
            height=55.0
        )

        search_image_3 = PhotoImage(
            file=relative_to_assets("btnSearch.png"))
        btnSearch = Button(
            image=search_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("btnSearch clicked"),
            relief="flat"
        )
        btnSearch.place(
            x=632.0,
            y=31.0,
            width=185.0,
            height=55.0
        )

        curRented_image_4 = PhotoImage(
            file=relative_to_assets("btnCurRented.png"))
        btnCurRented = Button(
            image=curRented_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("btnCurRented clicked"),
            relief="flat"
        )
        btnCurRented.place(
            x=161.0,
            y=121.0,
            width=186.0,
            height=51.0
        )

        transHist_image_5 = PhotoImage(
            file=relative_to_assets("btnTransHist.png"))
        btnTransHist = Button(
            image=transHist_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("btnTransHist clicked"),
            relief="flat"
        )
        btnTransHist.place(
            x=361.0,
            y=121.0,
            width=186.0,
            height=51.0
        )
        global logoGoPlant
        logoGoPlant = PhotoImage(
            file=relative_to_assets("logoGoplant.png"))
        btnHome = Button(
            image=logoGoPlant,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: homePage(self.root, canvas, self.db, self.curUser),
            relief="flat",
            bg="#FFFFFF"
        )
        btnHome.place(
            x=80.0,
            y=20.0,
            width=186.0,
            height=60.0)

        root.resizable(False, False)

    def displayListTanaman(self, canvas, datas, curIdx):

        # frame buat list tanaman
        DaftarTanaman = Frame(canvas, bg = "#DCE1DD")
        DaftarTanaman.place(x = 0, y = 235, height= 496, width=1280)
        if(curIdx>0):
        # Left Button
            leftButton = Button(DaftarTanaman, text="<", font = "Montserrat 18 bold", activebackground="#FFFFFF", fg = "#FFFFFF", bg = "#216869", command=lambda:self.moveLeft(canvas, datas))
            leftButton.place(x=18, y=200, anchor="center")
        if(curIdx<len(datas)-1):
        # Right Button
            rightButton = Button(DaftarTanaman, text=">", font = "Montserrat 18 bold", activebackground="#FFFFFF", fg = "#FFFFFF", bg = "#216869", command=lambda:self.moveRight(canvas, datas))
            rightButton.place(x=1262, y=200, anchor="center")
        # first frame
        xi = 177
        yi = 0
        i = 0 # counter banyak frame
        idxPlant = curIdx
        # curIdx counter index file
        if(len(datas) == 0):
            namaTanaman = Label(canvas, text="Belum pernah sewa tanaman", font=("Inter", 40, "bold"), fg="#000000", bg="#DCE1DD", justify=CENTER)
            namaTanaman.place(x=300, y=349)
        else:
            global plantImg1
            global plantImg2
            global plantImg3
            global plantImg4
        # 4 tanaman per page
            while(i<4 and idxPlant < len(datas)):
                kotak = 0
                while(kotak < 2 and idxPlant < len(datas)):
                    card = Frame(DaftarTanaman, bg="#216669")
                    card.place(x = xi, y = yi, height=219, width=424)

                    #tanggal akhir sewa tanaman
                    tanggalTanaman = Label(card, text=str(datas[idxPlant][3]), font=("Inter", 10), fg="#7DC8A5", bg="#216669")
                    tanggalTanaman.place(x=191, y=125)

                    # nama tanaman
                    namaTanaman = Label(card, text=str(datas[idxPlant][1]), wraplength=172, font=("Inter", 18, "bold"), fg="#FFFFFF", bg="#216669")
                    namaTanaman.place(x=191, y=141)

                    # gambar tanaman
                    if(i==0):
                        plantImg1 = ImageTk.PhotoImage(Image.open(str(datas[idxPlant][2])).resize((143,178)))
                        fotoTanaman = Label(card, image=plantImg1)
                        fotoTanaman.place(x=27, y=21)
                    elif(i==1):
                        plantImg2 = ImageTk.PhotoImage(Image.open(str(datas[idxPlant][2])).resize((143,178)))
                        fotoTanaman = Label(card, image=plantImg2)
                        fotoTanaman.place(x=27, y=21)
                    elif(i==2):
                        plantImg3 = ImageTk.PhotoImage(Image.open(str(datas[idxPlant][2])).resize((143,178)))
                        fotoTanaman = Label(card, image=plantImg3)
                        fotoTanaman.place(x=27, y=21)
                    elif(i==3):
                        plantImg4 = ImageTk.PhotoImage(Image.open(str(datas[idxPlant][2])).resize((143,178)))
                        fotoTanaman = Label(card, image=plantImg4)
                        fotoTanaman.place(x=27, y=21)

                    xi += 449
                    kotak += 1
                    i += 1
                    idxPlant += 1
                xi = 177
                yi += 242

    def moveLeft(self, canvas, datas):
        if (self.curIdx > 4):
            self.displayListTanaman(canvas, datas, self.curIdx - 4)
            self.curIdx = self.curIdx - 4
        else:
            self.curIdx = 0
            self.displayListTanaman(canvas, datas, self.curIdx)

    def moveRight(self, canvas, datas):
        if (self.curIdx + 4 < len(datas)):
            self.displayListTanaman(canvas, datas, self.curIdx + 4)
            self.curIdx = self.curIdx + 4
        else:
            self.displayListTanaman(canvas, datas, self.curIdx)